#version 450

struct Particle {
	vec2 position;
	vec2 velocity;
};

layout (binding = 0) uniform ParameterUBO {
    float deltaTime;
    float cursorPosX;
    float cursorPosY;
    bool followCursor;
    bool padding[3];
} ubo;

layout(std140, binding = 1) readonly buffer ParticleSSBOIn {
   Particle particlesIn[ ];
};

layout(std140, binding = 2) buffer ParticleSSBOOut {
   Particle particlesOut[ ];
};

layout (local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

void main() 
{
    uint index = gl_GlobalInvocationID.x;  

    Particle particleIn = particlesIn[index];

    particlesOut[index].position = particleIn.position + particleIn.velocity.xy * ubo.deltaTime;
    particlesOut[index].velocity = particleIn.velocity;
    particlesOut[index].velocity += (ubo.followCursor ? 1 : 0) * normalize(vec2(ubo.cursorPosX, ubo.cursorPosY) - particleIn.position) * 0.0000025f;
    // particlesOut[index].velocity *= 0.9999f;
    // const float velocity = length(particlesOut[index].velocity);
    // const float maxVelocity = 0.001f;

    // if(velocity > maxVelocity)
    // {
    //     particlesOut[index].velocity *= (velocity/maxVelocity);
    // }

    // Flip movement at window border
    if ((particlesOut[index].position.x <= -1.0)) {
        particlesOut[index].position.x = -0.9999f;
        particlesOut[index].velocity.x *= -0.6f; //= -particlesOut[index].velocity.x;
    }
    if (particlesOut[index].position.x >= 1.0)
    {
        particlesOut[index].position.x = 0.9999f;
        particlesOut[index].velocity.x *= -0.6f; //= -particlesOut[index].velocity.x;
    }
    if ((particlesOut[index].position.y <= -1.0)) {
        particlesOut[index].position.y = -0.9999f;
        particlesOut[index].velocity.y *= -0.6f; //= -particlesOut[index].velocity.y;
    }
    if (particlesOut[index].position.y >= 1.0)
    {
        particlesOut[index].position.y = 0.9999f;
        particlesOut[index].velocity.y *= -0.6f; //= -particlesOut[index].velocity.y;
    }

}